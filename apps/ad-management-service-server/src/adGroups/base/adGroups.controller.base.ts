/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdGroupsService } from "../adGroups.service";
import { AdGroupsCreateInput } from "./AdGroupsCreateInput";
import { AdGroups } from "./AdGroups";
import { AdGroupsFindManyArgs } from "./AdGroupsFindManyArgs";
import { AdGroupsWhereUniqueInput } from "./AdGroupsWhereUniqueInput";
import { AdGroupsUpdateInput } from "./AdGroupsUpdateInput";
import { AdsFindManyArgs } from "../../ads/base/AdsFindManyArgs";
import { Ads } from "../../ads/base/Ads";
import { AdsWhereUniqueInput } from "../../ads/base/AdsWhereUniqueInput";

export class AdGroupsControllerBase {
  constructor(protected readonly service: AdGroupsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdGroups })
  async createAdGroups(
    @common.Body() data: AdGroupsCreateInput
  ): Promise<AdGroups> {
    return await this.service.createAdGroups({
      data: {
        ...data,

        campaign: data.campaign
          ? {
              connect: data.campaign,
            }
          : undefined,
      },
      select: {
        campaign: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdGroups] })
  @ApiNestedQuery(AdGroupsFindManyArgs)
  async adGroupsItems(@common.Req() request: Request): Promise<AdGroups[]> {
    const args = plainToClass(AdGroupsFindManyArgs, request.query);
    return this.service.adGroupsItems({
      ...args,
      select: {
        campaign: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdGroups })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adGroups(
    @common.Param() params: AdGroupsWhereUniqueInput
  ): Promise<AdGroups | null> {
    const result = await this.service.adGroups({
      where: params,
      select: {
        campaign: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdGroups })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdGroups(
    @common.Param() params: AdGroupsWhereUniqueInput,
    @common.Body() data: AdGroupsUpdateInput
  ): Promise<AdGroups | null> {
    try {
      return await this.service.updateAdGroups({
        where: params,
        data: {
          ...data,

          campaign: data.campaign
            ? {
                connect: data.campaign,
              }
            : undefined,
        },
        select: {
          campaign: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdGroups })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdGroups(
    @common.Param() params: AdGroupsWhereUniqueInput
  ): Promise<AdGroups | null> {
    try {
      return await this.service.deleteAdGroups({
        where: params,
        select: {
          campaign: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/adsItems")
  @ApiNestedQuery(AdsFindManyArgs)
  async findAdsItems(
    @common.Req() request: Request,
    @common.Param() params: AdGroupsWhereUniqueInput
  ): Promise<Ads[]> {
    const query = plainToClass(AdsFindManyArgs, request.query);
    const results = await this.service.findAdsItems(params.id, {
      ...query,
      select: {
        adGroup: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        endDate: true,
        id: true,
        mediaFile: true,
        startDate: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/adsItems")
  async connectAdsItems(
    @common.Param() params: AdGroupsWhereUniqueInput,
    @common.Body() body: AdsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adsItems: {
        connect: body,
      },
    };
    await this.service.updateAdGroups({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/adsItems")
  async updateAdsItems(
    @common.Param() params: AdGroupsWhereUniqueInput,
    @common.Body() body: AdsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adsItems: {
        set: body,
      },
    };
    await this.service.updateAdGroups({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/adsItems")
  async disconnectAdsItems(
    @common.Param() params: AdGroupsWhereUniqueInput,
    @common.Body() body: AdsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adsItems: {
        disconnect: body,
      },
    };
    await this.service.updateAdGroups({
      where: params,
      data,
      select: { id: true },
    });
  }
}
