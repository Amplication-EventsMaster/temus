/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdGroups } from "./AdGroups";
import { AdGroupsCountArgs } from "./AdGroupsCountArgs";
import { AdGroupsFindManyArgs } from "./AdGroupsFindManyArgs";
import { AdGroupsFindUniqueArgs } from "./AdGroupsFindUniqueArgs";
import { CreateAdGroupsArgs } from "./CreateAdGroupsArgs";
import { UpdateAdGroupsArgs } from "./UpdateAdGroupsArgs";
import { DeleteAdGroupsArgs } from "./DeleteAdGroupsArgs";
import { AdsFindManyArgs } from "../../ads/base/AdsFindManyArgs";
import { Ads } from "../../ads/base/Ads";
import { Campaigns } from "../../campaigns/base/Campaigns";
import { AdGroupsService } from "../adGroups.service";
@graphql.Resolver(() => AdGroups)
export class AdGroupsResolverBase {
  constructor(protected readonly service: AdGroupsService) {}

  async _adGroupsItemsMeta(
    @graphql.Args() args: AdGroupsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdGroups])
  async adGroupsItems(
    @graphql.Args() args: AdGroupsFindManyArgs
  ): Promise<AdGroups[]> {
    return this.service.adGroupsItems(args);
  }

  @graphql.Query(() => AdGroups, { nullable: true })
  async adGroups(
    @graphql.Args() args: AdGroupsFindUniqueArgs
  ): Promise<AdGroups | null> {
    const result = await this.service.adGroups(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdGroups)
  async createAdGroups(
    @graphql.Args() args: CreateAdGroupsArgs
  ): Promise<AdGroups> {
    return await this.service.createAdGroups({
      ...args,
      data: {
        ...args.data,

        campaign: args.data.campaign
          ? {
              connect: args.data.campaign,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AdGroups)
  async updateAdGroups(
    @graphql.Args() args: UpdateAdGroupsArgs
  ): Promise<AdGroups | null> {
    try {
      return await this.service.updateAdGroups({
        ...args,
        data: {
          ...args.data,

          campaign: args.data.campaign
            ? {
                connect: args.data.campaign,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdGroups)
  async deleteAdGroups(
    @graphql.Args() args: DeleteAdGroupsArgs
  ): Promise<AdGroups | null> {
    try {
      return await this.service.deleteAdGroups(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Ads], { name: "adsItems" })
  async findAdsItems(
    @graphql.Parent() parent: AdGroups,
    @graphql.Args() args: AdsFindManyArgs
  ): Promise<Ads[]> {
    const results = await this.service.findAdsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Campaigns, {
    nullable: true,
    name: "campaign",
  })
  async getCampaign(
    @graphql.Parent() parent: AdGroups
  ): Promise<Campaigns | null> {
    const result = await this.service.getCampaign(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
