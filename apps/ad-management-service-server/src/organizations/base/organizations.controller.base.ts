/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrganizationsService } from "../organizations.service";
import { OrganizationsCreateInput } from "./OrganizationsCreateInput";
import { Organizations } from "./Organizations";
import { OrganizationsFindManyArgs } from "./OrganizationsFindManyArgs";
import { OrganizationsWhereUniqueInput } from "./OrganizationsWhereUniqueInput";
import { OrganizationsUpdateInput } from "./OrganizationsUpdateInput";
import { CampaignsFindManyArgs } from "../../campaigns/base/CampaignsFindManyArgs";
import { Campaigns } from "../../campaigns/base/Campaigns";
import { CampaignsWhereUniqueInput } from "../../campaigns/base/CampaignsWhereUniqueInput";

export class OrganizationsControllerBase {
  constructor(protected readonly service: OrganizationsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Organizations })
  async createOrganizations(
    @common.Body() data: OrganizationsCreateInput
  ): Promise<Organizations> {
    return await this.service.createOrganizations({
      data: {
        ...data,

        users: data.users
          ? {
              connect: data.users,
            }
          : undefined,
      },
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Organizations] })
  @ApiNestedQuery(OrganizationsFindManyArgs)
  async organizationsItems(
    @common.Req() request: Request
  ): Promise<Organizations[]> {
    const args = plainToClass(OrganizationsFindManyArgs, request.query);
    return this.service.organizationsItems({
      ...args,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Organizations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async organizations(
    @common.Param() params: OrganizationsWhereUniqueInput
  ): Promise<Organizations | null> {
    const result = await this.service.organizations({
      where: params,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Organizations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrganizations(
    @common.Param() params: OrganizationsWhereUniqueInput,
    @common.Body() data: OrganizationsUpdateInput
  ): Promise<Organizations | null> {
    try {
      return await this.service.updateOrganizations({
        where: params,
        data: {
          ...data,

          users: data.users
            ? {
                connect: data.users,
              }
            : undefined,
        },
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Organizations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrganizations(
    @common.Param() params: OrganizationsWhereUniqueInput
  ): Promise<Organizations | null> {
    try {
      return await this.service.deleteOrganizations({
        where: params,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/campaignsItems")
  @ApiNestedQuery(CampaignsFindManyArgs)
  async findCampaignsItems(
    @common.Req() request: Request,
    @common.Param() params: OrganizationsWhereUniqueInput
  ): Promise<Campaigns[]> {
    const query = plainToClass(CampaignsFindManyArgs, request.query);
    const results = await this.service.findCampaignsItems(params.id, {
      ...query,
      select: {
        budget: true,
        createdAt: true,
        endDate: true,
        id: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/campaignsItems")
  async connectCampaignsItems(
    @common.Param() params: OrganizationsWhereUniqueInput,
    @common.Body() body: CampaignsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      campaignsItems: {
        connect: body,
      },
    };
    await this.service.updateOrganizations({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/campaignsItems")
  async updateCampaignsItems(
    @common.Param() params: OrganizationsWhereUniqueInput,
    @common.Body() body: CampaignsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      campaignsItems: {
        set: body,
      },
    };
    await this.service.updateOrganizations({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/campaignsItems")
  async disconnectCampaignsItems(
    @common.Param() params: OrganizationsWhereUniqueInput,
    @common.Body() body: CampaignsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      campaignsItems: {
        disconnect: body,
      },
    };
    await this.service.updateOrganizations({
      where: params,
      data,
      select: { id: true },
    });
  }
}
