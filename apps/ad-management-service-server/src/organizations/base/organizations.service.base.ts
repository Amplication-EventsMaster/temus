/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Organizations as PrismaOrganizations,
  Campaigns as PrismaCampaigns,
  Users as PrismaUsers,
} from "@prisma/client";

export class OrganizationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrganizationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.organizations.count(args);
  }

  async organizationsItems<T extends Prisma.OrganizationsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsFindManyArgs>
  ): Promise<PrismaOrganizations[]> {
    return this.prisma.organizations.findMany<Prisma.OrganizationsFindManyArgs>(
      args
    );
  }
  async organizations<T extends Prisma.OrganizationsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsFindUniqueArgs>
  ): Promise<PrismaOrganizations | null> {
    return this.prisma.organizations.findUnique(args);
  }
  async createOrganizations<T extends Prisma.OrganizationsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsCreateArgs>
  ): Promise<PrismaOrganizations> {
    return this.prisma.organizations.create<T>(args);
  }
  async updateOrganizations<T extends Prisma.OrganizationsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsUpdateArgs>
  ): Promise<PrismaOrganizations> {
    return this.prisma.organizations.update<T>(args);
  }
  async deleteOrganizations<T extends Prisma.OrganizationsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsDeleteArgs>
  ): Promise<PrismaOrganizations> {
    return this.prisma.organizations.delete(args);
  }

  async findCampaignsItems(
    parentId: string,
    args: Prisma.CampaignsFindManyArgs
  ): Promise<PrismaCampaigns[]> {
    return this.prisma.organizations
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .campaignsItems(args);
  }

  async getUsers(parentId: string): Promise<PrismaUsers | null> {
    return this.prisma.organizations
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
