/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Organizations } from "./Organizations";
import { OrganizationsCountArgs } from "./OrganizationsCountArgs";
import { OrganizationsFindManyArgs } from "./OrganizationsFindManyArgs";
import { OrganizationsFindUniqueArgs } from "./OrganizationsFindUniqueArgs";
import { CreateOrganizationsArgs } from "./CreateOrganizationsArgs";
import { UpdateOrganizationsArgs } from "./UpdateOrganizationsArgs";
import { DeleteOrganizationsArgs } from "./DeleteOrganizationsArgs";
import { CampaignsFindManyArgs } from "../../campaigns/base/CampaignsFindManyArgs";
import { Campaigns } from "../../campaigns/base/Campaigns";
import { Users } from "../../users/base/Users";
import { OrganizationsService } from "../organizations.service";
@graphql.Resolver(() => Organizations)
export class OrganizationsResolverBase {
  constructor(protected readonly service: OrganizationsService) {}

  async _organizationsItemsMeta(
    @graphql.Args() args: OrganizationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Organizations])
  async organizationsItems(
    @graphql.Args() args: OrganizationsFindManyArgs
  ): Promise<Organizations[]> {
    return this.service.organizationsItems(args);
  }

  @graphql.Query(() => Organizations, { nullable: true })
  async organizations(
    @graphql.Args() args: OrganizationsFindUniqueArgs
  ): Promise<Organizations | null> {
    const result = await this.service.organizations(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Organizations)
  async createOrganizations(
    @graphql.Args() args: CreateOrganizationsArgs
  ): Promise<Organizations> {
    return await this.service.createOrganizations({
      ...args,
      data: {
        ...args.data,

        users: args.data.users
          ? {
              connect: args.data.users,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Organizations)
  async updateOrganizations(
    @graphql.Args() args: UpdateOrganizationsArgs
  ): Promise<Organizations | null> {
    try {
      return await this.service.updateOrganizations({
        ...args,
        data: {
          ...args.data,

          users: args.data.users
            ? {
                connect: args.data.users,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Organizations)
  async deleteOrganizations(
    @graphql.Args() args: DeleteOrganizationsArgs
  ): Promise<Organizations | null> {
    try {
      return await this.service.deleteOrganizations(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Campaigns], { name: "campaignsItems" })
  async findCampaignsItems(
    @graphql.Parent() parent: Organizations,
    @graphql.Args() args: CampaignsFindManyArgs
  ): Promise<Campaigns[]> {
    const results = await this.service.findCampaignsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Users, {
    nullable: true,
    name: "users",
  })
  async getUsers(
    @graphql.Parent() parent: Organizations
  ): Promise<Users | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
