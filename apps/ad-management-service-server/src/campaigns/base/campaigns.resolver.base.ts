/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Campaigns } from "./Campaigns";
import { CampaignsCountArgs } from "./CampaignsCountArgs";
import { CampaignsFindManyArgs } from "./CampaignsFindManyArgs";
import { CampaignsFindUniqueArgs } from "./CampaignsFindUniqueArgs";
import { CreateCampaignsArgs } from "./CreateCampaignsArgs";
import { UpdateCampaignsArgs } from "./UpdateCampaignsArgs";
import { DeleteCampaignsArgs } from "./DeleteCampaignsArgs";
import { AdGroupsFindManyArgs } from "../../adGroups/base/AdGroupsFindManyArgs";
import { AdGroups } from "../../adGroups/base/AdGroups";
import { Organizations } from "../../organizations/base/Organizations";
import { CampaignsService } from "../campaigns.service";
@graphql.Resolver(() => Campaigns)
export class CampaignsResolverBase {
  constructor(protected readonly service: CampaignsService) {}

  async _campaignsItemsMeta(
    @graphql.Args() args: CampaignsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Campaigns])
  async campaignsItems(
    @graphql.Args() args: CampaignsFindManyArgs
  ): Promise<Campaigns[]> {
    return this.service.campaignsItems(args);
  }

  @graphql.Query(() => Campaigns, { nullable: true })
  async campaigns(
    @graphql.Args() args: CampaignsFindUniqueArgs
  ): Promise<Campaigns | null> {
    const result = await this.service.campaigns(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Campaigns)
  async createCampaigns(
    @graphql.Args() args: CreateCampaignsArgs
  ): Promise<Campaigns> {
    return await this.service.createCampaigns({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Campaigns)
  async updateCampaigns(
    @graphql.Args() args: UpdateCampaignsArgs
  ): Promise<Campaigns | null> {
    try {
      return await this.service.updateCampaigns({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Campaigns)
  async deleteCampaigns(
    @graphql.Args() args: DeleteCampaignsArgs
  ): Promise<Campaigns | null> {
    try {
      return await this.service.deleteCampaigns(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AdGroups], { name: "adGroupsItems" })
  async findAdGroupsItems(
    @graphql.Parent() parent: Campaigns,
    @graphql.Args() args: AdGroupsFindManyArgs
  ): Promise<AdGroups[]> {
    const results = await this.service.findAdGroupsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Organizations, {
    nullable: true,
    name: "organization",
  })
  async getOrganization(
    @graphql.Parent() parent: Campaigns
  ): Promise<Organizations | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
