/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CampaignsService } from "../campaigns.service";
import { CampaignsCreateInput } from "./CampaignsCreateInput";
import { Campaigns } from "./Campaigns";
import { CampaignsFindManyArgs } from "./CampaignsFindManyArgs";
import { CampaignsWhereUniqueInput } from "./CampaignsWhereUniqueInput";
import { CampaignsUpdateInput } from "./CampaignsUpdateInput";
import { AdGroupsFindManyArgs } from "../../adGroups/base/AdGroupsFindManyArgs";
import { AdGroups } from "../../adGroups/base/AdGroups";
import { AdGroupsWhereUniqueInput } from "../../adGroups/base/AdGroupsWhereUniqueInput";

export class CampaignsControllerBase {
  constructor(protected readonly service: CampaignsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Campaigns })
  async createCampaigns(
    @common.Body() data: CampaignsCreateInput
  ): Promise<Campaigns> {
    return await this.service.createCampaigns({
      data: {
        ...data,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        budget: true,
        createdAt: true,
        endDate: true,
        id: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Campaigns] })
  @ApiNestedQuery(CampaignsFindManyArgs)
  async campaignsItems(@common.Req() request: Request): Promise<Campaigns[]> {
    const args = plainToClass(CampaignsFindManyArgs, request.query);
    return this.service.campaignsItems({
      ...args,
      select: {
        budget: true,
        createdAt: true,
        endDate: true,
        id: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Campaigns })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async campaigns(
    @common.Param() params: CampaignsWhereUniqueInput
  ): Promise<Campaigns | null> {
    const result = await this.service.campaigns({
      where: params,
      select: {
        budget: true,
        createdAt: true,
        endDate: true,
        id: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Campaigns })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCampaigns(
    @common.Param() params: CampaignsWhereUniqueInput,
    @common.Body() data: CampaignsUpdateInput
  ): Promise<Campaigns | null> {
    try {
      return await this.service.updateCampaigns({
        where: params,
        data: {
          ...data,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          budget: true,
          createdAt: true,
          endDate: true,
          id: true,
          name: true,

          organization: {
            select: {
              id: true,
            },
          },

          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Campaigns })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCampaigns(
    @common.Param() params: CampaignsWhereUniqueInput
  ): Promise<Campaigns | null> {
    try {
      return await this.service.deleteCampaigns({
        where: params,
        select: {
          budget: true,
          createdAt: true,
          endDate: true,
          id: true,
          name: true,

          organization: {
            select: {
              id: true,
            },
          },

          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/adGroupsItems")
  @ApiNestedQuery(AdGroupsFindManyArgs)
  async findAdGroupsItems(
    @common.Req() request: Request,
    @common.Param() params: CampaignsWhereUniqueInput
  ): Promise<AdGroups[]> {
    const query = plainToClass(AdGroupsFindManyArgs, request.query);
    const results = await this.service.findAdGroupsItems(params.id, {
      ...query,
      select: {
        campaign: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/adGroupsItems")
  async connectAdGroupsItems(
    @common.Param() params: CampaignsWhereUniqueInput,
    @common.Body() body: AdGroupsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adGroupsItems: {
        connect: body,
      },
    };
    await this.service.updateCampaigns({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/adGroupsItems")
  async updateAdGroupsItems(
    @common.Param() params: CampaignsWhereUniqueInput,
    @common.Body() body: AdGroupsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adGroupsItems: {
        set: body,
      },
    };
    await this.service.updateCampaigns({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/adGroupsItems")
  async disconnectAdGroupsItems(
    @common.Param() params: CampaignsWhereUniqueInput,
    @common.Body() body: AdGroupsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adGroupsItems: {
        disconnect: body,
      },
    };
    await this.service.updateCampaigns({
      where: params,
      data,
      select: { id: true },
    });
  }
}
