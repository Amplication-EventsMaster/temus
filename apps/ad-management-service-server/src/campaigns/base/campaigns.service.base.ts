/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Campaigns as PrismaCampaigns,
  AdGroups as PrismaAdGroups,
  Organizations as PrismaOrganizations,
} from "@prisma/client";

export class CampaignsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CampaignsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.campaigns.count(args);
  }

  async campaignsItems<T extends Prisma.CampaignsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignsFindManyArgs>
  ): Promise<PrismaCampaigns[]> {
    return this.prisma.campaigns.findMany<Prisma.CampaignsFindManyArgs>(args);
  }
  async campaigns<T extends Prisma.CampaignsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignsFindUniqueArgs>
  ): Promise<PrismaCampaigns | null> {
    return this.prisma.campaigns.findUnique(args);
  }
  async createCampaigns<T extends Prisma.CampaignsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignsCreateArgs>
  ): Promise<PrismaCampaigns> {
    return this.prisma.campaigns.create<T>(args);
  }
  async updateCampaigns<T extends Prisma.CampaignsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignsUpdateArgs>
  ): Promise<PrismaCampaigns> {
    return this.prisma.campaigns.update<T>(args);
  }
  async deleteCampaigns<T extends Prisma.CampaignsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignsDeleteArgs>
  ): Promise<PrismaCampaigns> {
    return this.prisma.campaigns.delete(args);
  }

  async findAdGroupsItems(
    parentId: string,
    args: Prisma.AdGroupsFindManyArgs
  ): Promise<PrismaAdGroups[]> {
    return this.prisma.campaigns
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .adGroupsItems(args);
  }

  async getOrganization(parentId: string): Promise<PrismaOrganizations | null> {
    return this.prisma.campaigns
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }
}
