/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ads } from "./Ads";
import { AdsCountArgs } from "./AdsCountArgs";
import { AdsFindManyArgs } from "./AdsFindManyArgs";
import { AdsFindUniqueArgs } from "./AdsFindUniqueArgs";
import { CreateAdsArgs } from "./CreateAdsArgs";
import { UpdateAdsArgs } from "./UpdateAdsArgs";
import { DeleteAdsArgs } from "./DeleteAdsArgs";
import { CategoriesFindManyArgs } from "../../categories/base/CategoriesFindManyArgs";
import { Categories } from "../../categories/base/Categories";
import { AdGroups } from "../../adGroups/base/AdGroups";
import { AdsService } from "../ads.service";
@graphql.Resolver(() => Ads)
export class AdsResolverBase {
  constructor(protected readonly service: AdsService) {}

  async _adsItemsMeta(
    @graphql.Args() args: AdsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ads])
  async adsItems(@graphql.Args() args: AdsFindManyArgs): Promise<Ads[]> {
    return this.service.adsItems(args);
  }

  @graphql.Query(() => Ads, { nullable: true })
  async ads(@graphql.Args() args: AdsFindUniqueArgs): Promise<Ads | null> {
    const result = await this.service.ads(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ads)
  async createAds(@graphql.Args() args: CreateAdsArgs): Promise<Ads> {
    return await this.service.createAds({
      ...args,
      data: {
        ...args.data,

        adGroup: args.data.adGroup
          ? {
              connect: args.data.adGroup,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Ads)
  async updateAds(@graphql.Args() args: UpdateAdsArgs): Promise<Ads | null> {
    try {
      return await this.service.updateAds({
        ...args,
        data: {
          ...args.data,

          adGroup: args.data.adGroup
            ? {
                connect: args.data.adGroup,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ads)
  async deleteAds(@graphql.Args() args: DeleteAdsArgs): Promise<Ads | null> {
    try {
      return await this.service.deleteAds(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Categories], { name: "categoriesItems" })
  async findCategoriesItems(
    @graphql.Parent() parent: Ads,
    @graphql.Args() args: CategoriesFindManyArgs
  ): Promise<Categories[]> {
    const results = await this.service.findCategoriesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => AdGroups, {
    nullable: true,
    name: "adGroup",
  })
  async getAdGroup(@graphql.Parent() parent: Ads): Promise<AdGroups | null> {
    const result = await this.service.getAdGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
