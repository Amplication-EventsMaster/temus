/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Ads as PrismaAds,
  Categories as PrismaCategories,
  AdGroups as PrismaAdGroups,
} from "@prisma/client";

export class AdsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AdsCountArgs, "select">): Promise<number> {
    return this.prisma.ads.count(args);
  }

  async adsItems<T extends Prisma.AdsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdsFindManyArgs>
  ): Promise<PrismaAds[]> {
    return this.prisma.ads.findMany<Prisma.AdsFindManyArgs>(args);
  }
  async ads<T extends Prisma.AdsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdsFindUniqueArgs>
  ): Promise<PrismaAds | null> {
    return this.prisma.ads.findUnique(args);
  }
  async createAds<T extends Prisma.AdsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdsCreateArgs>
  ): Promise<PrismaAds> {
    return this.prisma.ads.create<T>(args);
  }
  async updateAds<T extends Prisma.AdsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdsUpdateArgs>
  ): Promise<PrismaAds> {
    return this.prisma.ads.update<T>(args);
  }
  async deleteAds<T extends Prisma.AdsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdsDeleteArgs>
  ): Promise<PrismaAds> {
    return this.prisma.ads.delete(args);
  }

  async findCategoriesItems(
    parentId: string,
    args: Prisma.CategoriesFindManyArgs
  ): Promise<PrismaCategories[]> {
    return this.prisma.ads
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .categoriesItems(args);
  }

  async getAdGroup(parentId: string): Promise<PrismaAdGroups | null> {
    return this.prisma.ads
      .findUnique({
        where: { id: parentId },
      })
      .adGroup();
  }
}
